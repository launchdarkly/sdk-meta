{
  "allFlags": {
    "description": "Return the flag variations for all feature flags for a given context.",
    "name": "Getting all flags"
  },
  "appMetadata": {
    "description": "Specify application and application version information.",
    "name": "Application metadata"
  },
  "autoEnvAttrs": {
    "description": "Automatically include device and application data in each evaluated context.",
    "name": "Automatic environment attributes"
  },
  "bigSegments": {
    "description": "Configure a persistent store to hold segments that are either synced from external tools, or that contain an arbitrarily large number of contexts of any one context kind.",
    "name": "Big segments"
  },
  "bootstrapping": {
    "description": "Provide an initial set of flag values that are immediately available during client initialization.",
    "name": "Bootstrapping"
  },
  "contexts": {
    "description": "Evaluate flags based on contexts. A context is a generalized way of referring to the people, services, machines, or other resources that encounter feature flags. SDKs without this feature only support flag evaluation for users.",
    "name": "Contexts and context kinds"
  },
  "experimentation": {
    "description": "Connect a flag with one or more metrics to measure end-user behavior for different variations of a flag. Requires minimum SDK versions, but no SDK configuration.",
    "name": "Experimentation"
  },
  "fileDataSource": {
    "description": "Use flag values, specified in JSON or YAML files, for all flag evaluations. Useful for testing or prototyping; do not use in production.",
    "name": "Reading flags from a file"
  },
  "flagChanges": {
    "description": "Use a listener pattern to subscribe to flag change notifications.",
    "name": "Subscribing to flag changes"
  },
  "hooks": {
    "description": "Define callbacks that are executed by the SDK at various points of interest, usually for metrics or tracing.",
    "name": "Hooks"
  },
  "migrations": {
    "description": "Configure how to read and write data for an old and new system, determine which stage of a migration the application is in, execute the correct read and write calls for each stage.",
    "name": "Migration flags"
  },
  "multiEnv": {
    "description": "Evaluate flags from multiple environments using a single client instance",
    "name": "Multiple environments"
  },
  "offlineMode": {
    "description": "Close the SDK's connection to LaunchDarkly. Use cached or fallback values for each flag evaluation.",
    "name": "Offline mode"
  },
  "otel": {
    "description": "Add flag evaluation information to OpenTelemetry spans.",
    "name": "OpenTelemetry"
  },
  "privateAttrs": {
    "description": "Use context attribute values for targeting, but do not send them to LaunchDarkly.",
    "name": "Private attributes"
  },
  "relayProxyDaemon": {
    "description": "Configure the SDK to connect to a persistent store, such as the Relay Proxy's data store.",
    "name": "Relay Proxy in daemon mode"
  },
  "relayProxyProxy": {
    "description": "Configure the SDK to connect to alternate service endpoints, such as the Relay Proxy.",
    "name": "Relay Proxy in proxy mode"
  },
  "secureMode": {
    "description": "For clent-side SDKs, require a hash, signed with the SDK key for the LaunchDarkly environment, to evaluate flag variations. For server-side or edge SDKs, generate a secure mode hash.",
    "name": "Secure mode"
  },
  "storingData": {
    "description": "Configure an external database as a feature store. Persist flag data across application restarts.",
    "name": "Storing data"
  },
  "testDataSource": {
    "description": "Mock data of an SDK. Useful for unit tests; cannot be used in production.",
    "name": "Test data sources"
  },
  "track": {
    "description": "Record actions taken in your application as events. You can connect to these events to metrics for use in experiments.",
    "name": "Sending custom events"
  },
  "variationDetail": {
    "description": "Receive information about how a flag variation was calculated, for example, because it matched a specific targeting rule.",
    "name": "Flag evaluation reasons"
  },
  "webProxy": {
    "description": "Configure the SDK to connect to LaunchDarkly through a web proxy.",
    "name": "Web proxy configuration"
  }
}
