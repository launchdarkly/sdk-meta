// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "encoding/json"
import "fmt"

type Message struct {
	// Parameterized corresponds to the JSON schema field "parameterized".
	Parameterized string `json:"parameterized" yaml:"parameterized" mapstructure:"parameterized"`

	// Parameters corresponds to the JSON schema field "parameters".
	Parameters MessageParameters `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
}

type MessageParameters map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *Message) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["parameterized"]; !ok || v == nil {
		return fmt.Errorf("field parameterized in Message: required")
	}
	type Plain Message
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Message(plain)
	return nil
}

type Code struct {
	// Description corresponds to the JSON schema field "description".
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// Message corresponds to the JSON schema field "message".
	Message Message `json:"message" yaml:"message" mapstructure:"message"`

	// Specifier corresponds to the JSON schema field "specifier".
	Specifier float64 `json:"specifier" yaml:"specifier" mapstructure:"specifier"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Code) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description in Code: required")
	}
	if v, ok := raw["message"]; !ok || v == nil {
		return fmt.Errorf("field message in Code: required")
	}
	if v, ok := raw["specifier"]; !ok || v == nil {
		return fmt.Errorf("field specifier in Code: required")
	}
	type Plain Code
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Code(plain)
	return nil
}

type Class struct {
	// AdditionalProperties corresponds to the JSON schema field
	// "additionalProperties".
	AdditionalProperties interface{} `json:"additionalProperties,omitempty" yaml:"additionalProperties,omitempty" mapstructure:"additionalProperties,omitempty"`

	// Codes corresponds to the JSON schema field "codes".
	Codes ClassCodes `json:"codes" yaml:"codes" mapstructure:"codes"`

	// Description corresponds to the JSON schema field "description".
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// Specifier corresponds to the JSON schema field "specifier".
	Specifier float64 `json:"specifier" yaml:"specifier" mapstructure:"specifier"`
}

type ClassCodes map[string]Code

// UnmarshalJSON implements json.Unmarshaler.
func (j *Class) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["codes"]; !ok || v == nil {
		return fmt.Errorf("field codes in Class: required")
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description in Class: required")
	}
	if v, ok := raw["specifier"]; !ok || v == nil {
		return fmt.Errorf("field specifier in Class: required")
	}
	type Plain Class
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Class(plain)
	return nil
}

type System struct {
	// Classes corresponds to the JSON schema field "classes".
	Classes SystemClasses `json:"classes" yaml:"classes" mapstructure:"classes"`

	// Description corresponds to the JSON schema field "description".
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// Specifier corresponds to the JSON schema field "specifier".
	Specifier float64 `json:"specifier" yaml:"specifier" mapstructure:"specifier"`
}

type SystemClasses map[string]Class

// UnmarshalJSON implements json.Unmarshaler.
func (j *System) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["classes"]; !ok || v == nil {
		return fmt.Errorf("field classes in System: required")
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description in System: required")
	}
	if v, ok := raw["specifier"]; !ok || v == nil {
		return fmt.Errorf("field specifier in System: required")
	}
	type Plain System
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = System(plain)
	return nil
}

// Defines LaunchDarkly SDK Log Codes
type LdLogCodesJson map[string]System
